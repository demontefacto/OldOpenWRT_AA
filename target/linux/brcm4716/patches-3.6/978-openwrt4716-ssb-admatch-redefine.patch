From: George Kashperko <george@znau.edu.ua>

Move direct master/slave wrappers registers' queries into SSB management code.
Indirect requests to SB management code for wrappers' base/size rather than
direct access to backplane-specific registers will let adding AI-style SSB
buses support without need to alter drivers' code later on.
Signed-off-by: George Kashperko <george@znau.edu.ua>
---
 drivers/ssb/driver_gige.c  |    2 +-
 drivers/ssb/main.c         |    8 ++++++--
 drivers/usb/host/ssb-hcd.c |    8 ++++----
 include/linux/ssb/ssb.h    |    4 ++--
 4 files changed, 13 insertions(+), 9 deletions(-)
--- linux-3.6.8.orig/drivers/ssb/driver_gige.c	2012-11-26 22:15:45.000000000 +0200
+++ linux-3.6.8/drivers/ssb/driver_gige.c	2012-12-08 02:46:18.924408276 +0200
@@ -197,7 +197,7 @@ static int __devinit ssb_gige_probe(stru
 		ssb_device_enable(sdev, 0);
 
 	/* Setup BAR0. This is a 64k MMIO region. */
-	base = ssb_admatch_base(ssb_read32(sdev, SSB_ADMATCH1));
+	base = ssb_admatch_base(sdev, SSB_ADMATCH1);
 	gige_pcicfg_write32(dev, PCI_BASE_ADDRESS_0, base);
 	gige_pcicfg_write32(dev, PCI_BASE_ADDRESS_1, 0);
 
--- linux-3.6.8.orig/drivers/ssb/main.c	2012-12-08 02:32:27.000000000 +0200
+++ linux-3.6.8/drivers/ssb/main.c	2012-12-08 02:46:18.924408276 +0200
@@ -1396,10 +1396,12 @@ void ssb_commit_settings(struct ssb_bus 
 }
 EXPORT_SYMBOL(ssb_commit_settings);
 
-u32 ssb_admatch_base(u32 adm)
+u32 ssb_admatch_base(struct ssb_device *dev, u32 adm)
 {
 	u32 base = 0;
 
+	adm = ssb_read32(dev, adm);
+
 	switch (adm & SSB_ADM_TYPE) {
 	case SSB_ADM_TYPE0:
 		base = (adm & SSB_ADM_BASE0);
@@ -1420,10 +1422,12 @@ u32 ssb_admatch_base(u32 adm)
 }
 EXPORT_SYMBOL(ssb_admatch_base);
 
-u32 ssb_admatch_size(u32 adm)
+u32 ssb_admatch_size(struct ssb_device *dev, u32 adm)
 {
 	u32 size = 0;
 
+	adm = ssb_read32(dev, adm);
+
 	switch (adm & SSB_ADM_TYPE) {
 	case SSB_ADM_TYPE0:
 		size = ((adm & SSB_ADM_SZ0) >> SSB_ADM_SZ0_SHIFT);
--- linux-3.6.8.orig/drivers/usb/host/ssb-hcd.c	2012-11-26 22:15:45.000000000 +0200
+++ linux-3.6.8/drivers/usb/host/ssb-hcd.c	2012-12-08 02:46:18.925408276 +0200
@@ -178,10 +178,10 @@ static int __devinit ssb_hcd_probe(struc
 	 * be written) Client mode driver. Same for remove(). */
 	usb_dev->enable_flags = ssb_hcd_init_chip(dev);
 
-	tmp = ssb_read32(dev, SSB_ADMATCH0);
+	tmp = ssb_admatch_base(dev, SSB_ADMATCH0);
 
-	start = ssb_admatch_base(tmp);
-	len = (coreid == SSB_DEV_USB20_HOST) ? 0x800 : ssb_admatch_size(tmp);
+	start = tmp;
+	len = ssb_admatch_size(dev, SSB_ADMATCH0);
 	usb_dev->ohci_dev = ssb_hcd_create_pdev(dev, true, start, len);
 	if (IS_ERR(usb_dev->ohci_dev)) {
 		err = PTR_ERR(usb_dev->ohci_dev);
@@ -189,7 +189,7 @@ static int __devinit ssb_hcd_probe(struc
 	}
 
 	if (coreid == SSB_DEV_USB20_HOST) {
-		start = ssb_admatch_base(tmp) + 0x800; /* ehci core offset */
+		start = tmp + 0x800; /* ehci core offset */
 		usb_dev->ehci_dev = ssb_hcd_create_pdev(dev, false, start, len);
 		if (IS_ERR(usb_dev->ehci_dev)) {
 			err = PTR_ERR(usb_dev->ehci_dev);
--- linux-3.6.8.orig/include/linux/ssb/ssb.h	2012-12-08 02:32:27.000000000 +0200
+++ linux-3.6.8/include/linux/ssb/ssb.h	2012-12-08 02:46:18.925408276 +0200
@@ -613,8 +613,8 @@ extern int ssb_bus_powerup(struct ssb_bu
 extern void ssb_commit_settings(struct ssb_bus *bus);
 
 /* Various helper functions */
-extern u32 ssb_admatch_base(u32 adm);
-extern u32 ssb_admatch_size(u32 adm);
+extern u32 ssb_admatch_base(struct ssb_device *dev, u32 adm);
+extern u32 ssb_admatch_size(struct ssb_device *dev, u32 adm);
 
 /* PCI device mapping and fixup routines.
  * Called from the architecture pcibios init code.
